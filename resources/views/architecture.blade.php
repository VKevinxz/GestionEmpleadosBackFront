@extends('layout')

@section('title', 'Arquitectura del Sistema')

@section('content')
<div class="card">
    <h2>Arquitectura del Sistema - Principios SOLID</h2>

    <div style="margin-top: 1rem;">
        <h3>1. Principio de Responsabilidad √önica (SRP)</h3>
        <p>Cada clase tiene una sola responsabilidad:</p>
        <ul>
            <li><strong>BaseEmployee</strong>: Maneja solo la l√≥gica base de empleados</li>
            <li><strong>PayrollService</strong>: Se encarga √∫nicamente del procesamiento de n√≥mina</li>
            <li><strong>ReportService</strong>: Responsable solo de generar reportes</li>
            <li><strong>EmployeeRepository</strong>: Maneja √∫nicamente la persistencia de datos</li>
        </ul>
    </div>

    <div style="margin-top: 1rem;">
        <h3>2. Principio Abierto/Cerrado (OCP)</h3>
        <p>El sistema est√° abierto para extensi√≥n pero cerrado para modificaci√≥n:</p>
        <ul>
            <li><strong>Generadores de Reportes</strong>: Nuevos formatos se agregan sin modificar c√≥digo existente</li>
            <li><strong>Notificaciones</strong>: Nuevos tipos de notificaci√≥n se pueden agregar f√°cilmente</li>
            <li><strong>Tipos de Empleados</strong>: Nuevos tipos se crean extendiendo BaseEmployee</li>
        </ul>
    </div>

    <div style="margin-top: 1rem;">
        <h3>3. Principio de Sustituci√≥n de Liskov (LSP)</h3>
        <p>Los objetos derivados pueden sustituir a sus clases base:</p>
        <ul>
            <li><strong>FullTimeEmployee, PartTimeEmployee, ContractorEmployee</strong>: Todos pueden sustituir a BaseEmployee</li>
            <li>Implementan <code>calculateSalary()</code> manteniendo el contrato esperado</li>
        </ul>
    </div>

    <div style="margin-top: 1rem;">
        <h3>4. Principio de Segregaci√≥n de Interfaces (ISP)</h3>
        <p>Interfaces espec√≠ficas y peque√±as:</p>
        <ul>
            <li><strong>EmployeeInterface</strong>: Define solo m√©todos b√°sicos de empleado</li>
            <li><strong>ReportGeneratorInterface</strong>: Solo m√©todos para generar reportes</li>
            <li><strong>NotificationInterface</strong>: Solo m√©todos para notificaciones</li>
        </ul>
    </div>

    <div style="margin-top: 1rem;">
        <h3>5. Principio de Inversi√≥n de Dependencias (DIP)</h3>
        <p>Dependencias de abstracciones, no de implementaciones:</p>
        <ul>
            <li><strong>EmployeeController</strong>: Depende de interfaces, no de implementaciones</li>
            <li><strong>PayrollService</strong>: Recibe dependencias por inyecci√≥n</li>
            <li><strong>ReportService</strong>: Usa abstracciones para generadores</li>
        </ul>
    </div>

    <div style="margin-top: 2rem;">
        <h3>Buenas Pr√°cticas Implementadas</h3>
        <ul>
            <li>‚úÖ Manejo de excepciones</li>
            <li>‚úÖ Nomenclatura consistente</li>
            <li>‚úÖ Validaci√≥n de datos</li>
            <li>‚úÖ Principio DRY (Don't Repeat Yourself)</li>
            <li>‚úÖ Documentaci√≥n del c√≥digo</li>
        </ul>
    </div>

    <div style="margin-top: 2rem;">
        <h3>Extensibilidad</h3>
        <p>El sistema permite f√°cilmente:</p>
        <ul>
            <li>üîß Agregar nuevos tipos de empleados</li>
            <li>üìä Incorporar nuevos formatos de reporte</li>
            <li>üì± Cambiar proveedores de notificaci√≥n</li>
            <li>üß™ Realizar pruebas unitarias</li>
        </ul>
    </div>

    <div style="margin-top: 1rem;">
        <a href="{{ route('employees.index') }}" class="btn btn-primary">Volver a Empleados</a>
    </div>
</div>
@endsection
